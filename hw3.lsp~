;
; CS161 Hw3: Sokoban
; 
; *********************
;    READ THIS FIRST
; ********************* 
;
; All functions that you need to modify are marked with 'EXERCISE' in their header comments.
; Do not modify a-star.lsp.
; This file also contains many helper functions. You may call any of them in your functions.
;
; *Warning*: The provided A* code only supports the maximum cost of 4999 for any node.
; That is f(n)=g(n)+h(n) < 5000. So, be careful when you write your heuristic functions.
; Do not make them return anything too large.
;
; For Allegro Common Lisp users: The free version of Allegro puts a limit on memory.
; So, it may crash on some hard sokoban problems and there is no easy fix (unless you buy 
; Allegro). 
; Of course, other versions of Lisp may also crash if the problem is too hard, but the amount
; of memory available will be relatively more relaxed.
; Improving the quality of the heuristic will mitigate this problem, as it will allow A* to
; solve hard problems with fewer node expansions.
; 
; In either case, this limitation should not significantly affect your grade.
; 
; Remember that most functions are not graded on efficiency (only correctness).
; Efficiency can only influence your heuristic performance in the competition (which will
; affect your score).
;  
;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; General utility functions
; They are not necessary for this homework.
; Use/modify them for your own convenience.
;

;
; For reloading modified code.
; I found this easier than typing (load "filename") every time. 
;
(defun reload()
  (load "hw3.lsp")
  )

;
; For loading a-star.lsp.
;
(defun load-a-star()
  (load "a-star.lsp"))

;
; Reloads hw3.lsp and a-star.lsp
;
(defun reload-all()
  (reload)
  (load-a-star)
  )

;
; A shortcut function.
; goal-test and next-states stay the same throughout the assignment.
; So, you can just call (sokoban <init-state> #'<heuristic-name>).
; 
;
(defun sokoban (s h)
  (a* s #'goal-test #'next-states h)
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; end general utility functions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; We now begin actual Sokoban code
;

; Define some global variables
(setq blank 0)
(setq wall 1)
(setq box 2)
(setq keeper 3)
(setq star 4)
(setq boxstar 5)
(setq keeperstar 6)

; Some helper functions for checking the content of a square
(defun isBlank (v)
  (= v blank)
  )

(defun isWall (v)
  (= v wall)
  )

(defun isBox (v)
  (= v box)
  )

(defun isKeeper (v)
  (= v keeper)
  )

(defun isStar (v)
  (= v star)
  )

(defun isBoxStar (v)
  (= v boxstar)
  )

(defun isKeeperStar (v)
  (= v keeperstar)
  )

;
; Helper function of getKeeperPosition
;
(defun getKeeperColumn (r col)
  (cond ((null r) nil)
	(t (if (or (isKeeper (car r)) (isKeeperStar (car r)))
	       col
	     (getKeeperColumn (cdr r) (+ col 1))
	     );end if
	   );end t
	);end cond
  )

;
; getKeeperPosition (s firstRow)
; Returns a list indicating the position of the keeper (c r).
; 
; Assumes that the keeper is in row >= firstRow.
; The top row is the zeroth row.
; The first (right) column is the zeroth column.
;

;cr
;40 30 20 10 00
;41 31 21 11 01
;42 32 22 12 02
;43 33 23 13 03
;44 34 24 14 04 
(defun getKeeperPosition (s row)
  (cond ((null s) nil)
	(t (let ((x (getKeeperColumn (car s) 0)))
	     (if x
		 ;keeper is in this row
		 (list x row)
		 ;otherwise move on
		 (getKeeperPosition (cdr s) (+ row 1))
		 );end if
	       );end let
	 );end t
	);end cond
  );end defun

;
; cleanUpList (l)
; returns l with any NIL element removed.
; For example, if l is '(1 2 NIL 3 NIL), returns '(1 2 3).
;
(defun cleanUpList (L)
  (cond ((null L) nil)
	(t (let ((cur (car L))
		 (res (cleanUpList (cdr L)))
		 )
	     (if cur 
		 (cons cur res)
		  res
		 )
	     );end let
	   );end t
	);end cond
  );end 

; EXERCISE: Modify this function to return true (t)
; if and only if s is a goal state of the game.
; (neither any boxes nor the keeper is on a non-goal square)
;
; Currently, it always returns NIL. If A* is called with
; this function as the goal testing function, A* will never
; terminate until the whole search space is exhausted.
;

;this function will return TRUE if either keeper or box is found
(defun goal-test-helper (L)
  (cond ((null L) NIL);return NIL if there is no box or keeper found
	((or (isKeeper (first L)) (isBox (first L))) T)
	(t (goal-test-helper (rest L)))
	)
  );end defun


;if the helper function found a box/keeper, the base case will return FALSE
;if the list is empty and no box/keeper found, it returns TRUE
(defun goal-test (s)
  (cond ((null s) t)
	((goal-test-helper (first s)) NIL)
	(t (goal-test (rest s)))
	);end cond
  );end defun



; EXERCISE: Modify this function to return the list of 
; sucessor states of s.
;
; This is the top-level next-states (successor) function.
; Some skeleton code is provided below.
; You may delete them totally, depending on your approach.
; 
; If you want to use it, you will need to set 'result' to be 
; the set of states after moving the keeper in each of the 4 directions.
; A pseudo-code for this is:
; 
; ...
; (result (list (try-move s UP) (try-move s DOWN) (try-move s LEFT) (try-move s RIGHT)))
; ...
; 
; You will need to define the function try-move and decide how to represent UP,DOWN,LEFT,RIGHT.
; Any NIL result returned from try-move can be removed by cleanUpList.
; 
;

;.........................     
;(setq up 0)
;(setq down 1)
;(setq left 2)
;(setq right 3)

;s = maze
;c = column
;r = row



;cr
;40 30 20 10 00
;41 31 21 11 01
;42 32 22 12 02
;43 33 23 13 03
;44 34 24 14 04  
;.........................


;return NIL if c r out of scope
;return the value on the position c r
(defun get-square (s c r)
  (cond ((or (< c 0) (>= c (length (first s)))) NIL)
        ((or (< r 0) (>= r (length s))) NIL)
	(t (car (nthcdr c (car (nthcdr r s)))))
	)
  )



;this function goes into column
(defun set-square-helper (s c v)
  (cond ((null s) NIL)
	((= c 0) (cons v (rest s)))
	(t (cons (first s) (set-square-helper (rest s) (- c 1) v)))
	)
  )



;change the value of pos c r to be v
;if input c r out of boundary, return the original list
(defun set-square (s c r v)
  (cond ((null s) NIL)
	((or (< c 0) (>= c (length (first s)))) s)
	((or (< r 0) (>= r (length s))) s)
	((= r 0) (cons (set-square-helper (first s) c v) (rest s)))
	(t (cons (first s) (set-square (rest s) c (- r 1) v)))
	)
  )




;columns and rows are like this:
;xy)
;cr                                                                                                    
;00 10 20 30 40                                                                                        
;01 11 21 31 41
;02 12 22 32 42
;03 13 23 33 43
;04 14 24 34 44 

;false conditions:
;cond1 keeper blocked by wall
;cond2 keeper blocked by box
;cond3 box blocked by wall

;true conditions;
;cond1 keeper moves into a blank space
;cond2 keeper moves into a goal
;cnnd3 keeper moves with a box(this will check false cond 3)
 

;s = maze
;c = column                                                                                            
;r = row



;return T if the keeper is blocked by wall;otherwise, return NIL
(defun wall-block-keeper (s c r direction); original position of the keeper will be passed in
  (cond;direction condtion
   ((= direction 0) (cond;0
		     ((equal 1 (get-square s c (- r 1))) T)
		     (t NIL)))
   ((= direction 1) (cond;1
		     ((equal 1 (get-square s c (+ r 1))) T)
		     (t NIl)))
   ((= direction 2) (cond;2
		     ((equal 1 (get-square s (- c 1) r)) T)
		     (t NIl)))
   ((= direction 3) (cond;3
		     ((equal 1 (get-square s (+ c 1) r)) T)
		     (t NIL)))
   )
  )



; wall(1), another box(2), or another box on goal(5)  will stop the motion of box;,otherwise, it can move to goal or blank
;return T if the box if blocked; otherwise, NIL
(defun wall-box-block-box (s c r direction);c r is box's position
  (cond;direction condtion
   ((= direction 0) (cond;0                      
		     ((or (equal 1 (get-square s c (- r 1))) (equal 2 (get-square s c (- r 1))) (equal 5 (get-square s c (- r 1)))) T)
                     (t NIL))
    );end of 0                                                                                                                                        
   ((= direction 1) (cond;1
		     ((or (equal 1 (get-square s c (+ r 1))) (equal 2 (get-square s c (+ r 1))) (equal 5 (get-square s c (+ r 1)))) T)
		     (t NIL))
    );end of 1
   ((= direction 2) (cond;2
		     ((or (equal 1 (get-square s (- c 1) r)) (equal 2 (get-square s (- c 1) r)) (equal 5 (get-square s (- c 1) r))) T)
		     (t NIL))
    );end of 2
   ((= direction 3) (cond;3 
		     ((or (equal 1 (get-square s (+ c 1) r)) (equal 2 (get-square s (+ c 1) r)) (equal 5 (get-square s (+ c 1) r))) T)
		     (t NIL))
    );end of 3
   );end of direction condition                                                                                                                                        
  )


					
;this function will be called if and only if keeper can push box(box-move is called to move the box).
;After the motion, the original keeper's postion wll be reset to 0/4
;here is set +2/-2 to get the position beyond box since the input c r are keeper's position. Hence, get-square will now check the next position of the box
;c r are keeper's current position
(defun keeper-push-box (s c r direction)
  (cond ((= direction 0) (cond ((equal 0 (get-square s c (- r 2))) (cond ((equal 2 (get-square s c (- r 1))) (set-square (box-move s c (- r 1) direction) c (- r 1) 3))
					;box on blank, then keeper move to blank
									 ((equal 5 (get-square s c (- r 1))) (set-square (box-move s c (- r 1) direction) c (- r 1) 6))))
					;box on goal, then keeper move to goal 
			       ((equal 4 (get-square s c (- r 2))) (cond ((equal 2 (get-square s c (- r 1))) (set-square (box-move s c (- r 1) direction) c (- r 1) 3))
									 ((equal 5 (get-square s c (- r 1))) (set-square (box-move s c (- r 1) direction) c (- r 1) 6))))))

	((= direction 1) (cond ((equal 0 (get-square s c (+ r 2))) (cond ((equal 2 (get-square s c (+ r 1))) (set-square (box-move s c (+ r 1) direction) c (+ r 1) 3))
									 ((equal 5 (get-square s c (+ r 1))) (set-square (box-move s c (+ r 1) direction) c (+ r 1) 6))))
			       ((equal 4 (get-square s c (+ r 2))) (cond ((equal 2 (get-square s c (+ r 1))) (set-square (box-move s c (+ r 1) direction) c (+ r 1) 3))
									 ((equal 5 (get-square s c (+ r 1))) (set-square (box-move s c (+ r 1) direction) c (+ r 1) 6))))))

	((= direction 2) (cond ((equal 0 (get-square s (- c 2) r)) (cond ((equal 2 (get-square s (- c 1) r)) (set-square (box-move s (- c 1) r direction) (- c 1) r 3))
									 ((equal 5 (get-square s (- c 1) r)) (set-square (box-move s (- c 1) r direction) (- c 1) r 6))))
			       ((equal 4 (get-square s (- c 2) r)) (cond ((equal 2 (get-square s (- c 1) r)) (set-square (box-move s (- c 1) r direction) (- c 1) r 3))
									 ((equal 5 (get-square s (- c 1) r)) (set-square (box-move s (- c 1) r direction) (- c 1) r 6))))))
	
	((= direction 3) (cond ((equal 0 (get-square s (+ c 2) r)) (cond ((equal 2 (get-square s (+ c 1) r)) (set-square (box-move s (+ c 1) r direction) (+ c 1) r 3))
									 ((equal 5 (get-square s (+ c 1) r)) (set-square (box-move s (+ c 1) r direction) (+ c 1) r 6))))
			       ((equal 4 (get-square s (+ c 2) r)) (cond ((equal 2 (get-square s (+ c 1) r)) (set-square (box-move s (+ c 1) r direction) (+ c 1) r 3))
									 ((equal 5 (get-square s (+ c 1) r)) (set-square (box-move s (+ c 1) r direction) (+ c 1) r 6))))))
	 )
  )

;reset-box-previous-position  
(defun r-b-p-p (s c r direction)
  (cond ((equal 2 (get-square s c r)) (set-square s c r 0))
        ((equal 5 (get-square s c r)) (set-square s c r 4))
        ))


;this fucntion will be called iff box is  able to move.
;input value of c r are box's position
;It does the actual motion of the box. the previous position of box will be reset to 0 or 4
(defun box-move (s c r direction)
  (cond ((= direction 0) (cond ((equal 0 (get-square s c (- r 1))) (set-square (r-b-p-p s c r direction) c (- r 1) 2));box move to blank
			       ((equal 4 (get-square s c (- r 1))) (set-square (r-b-p-p s c r direction) c (- r 1) 5));box move to goal
			       ))
	 
	((= direction 1) (cond ((equal 0 (get-square s c (+ r 1))) (set-square (r-b-p-p s c r direction) c (+ r 1) 2));box move to blank  
			       ((equal 4 (get-square s c (+ r 1))) (set-square (r-b-p-p s c r direction) c (+ r 1) 5));box move to goal
			       ))

	((= direction 2) (cond ((equal 0 (get-square s (- c 1) r)) (set-square (r-b-p-p s c r direction) (- c 1) r 2));box move to blank 
			       ((equal 4 (get-square s (- c 1) r)) (set-square (r-b-p-p s c r direction) (- c 1) r 5));box move to blank 
			       ))
	
	((= direction 3) (cond ((equal 0 (get-square s (+ c 1) r)) (set-square (r-b-p-p s c r direction) (+ c 1) r 2));box move to blank 
			       ((equal 4 (get-square s (+ c 1) r)) (set-square (r-b-p-p s c r direction) (+ c 1) r 5));box move to blank 
			       ))
	)
  )



;this function help turn the position that keeper just left to be blank or goal
;this function will be called if and only if the keeper moves successfully
;reset-keeper-previous-position
(defun r-k-p-p (s c r direction)
  (cond ((equal 3 (get-square s c r)) (set-square s c r 0))
	((equal 6 (get-square s c r)) (set-square s c r 4)) 
	))



;2 = box,5 = box+goal, 6 = keeper+goal
;c r is the keeper's current position
(defun try-move (s c r direction)
  (cond ((= direction 0) (cond ((wall-block-keeper s c r direction) NIL)
			       ((equal 0 (get-square s c (- r 1))) (set-square (r-k-p-p s c r direction) c (- r 1) 3))
			       ((equal 4 (get-square s c (- r 1))) (set-square (r-k-p-p s c r direction) c (- r 1) 6))
			       ((or (equal (get-square s c (- r 1)) 2) (equal (get-square s c (- r 1)) 5)) (cond ((wall-box-block-box s c (- r 1) direction) NIL)
													 (t (keeper-push-box (r-k-p-p s c r direction) c r direction))))
			       );cond 0
	 );up
	((= direction 1) (cond ((wall-block-keeper s c r direction) NIL)
			       ((equal 0 (get-square s c (+ r 1))) (set-square (r-k-p-p s c r direction) c (+ r 1) 3))
			       ((equal 4 (get-square s c (+ r 1))) (set-square (r-k-p-p s c r direction) c (+ r 1) 6))
			       ((or (equal (get-square s c (+ r 1)) 2) (equal (get-square s c (+ r 1)) 5)) (cond ((wall-box-block-box s c (+ r 1) direction) NIL)
													 (t (keeper-push-box (r-k-p-p s c r direction) c r direction))))
			       );cond 1
	 );down
	((= direction 2) (cond ((wall-block-keeper s c r direction) NIL)
			       ((equal 0 (get-square s (- c 1) r)) (set-square (r-k-p-p s c r direction) (- c 1) r 3))
			       ((equal 4 (get-square s (- c 1) r)) (set-square (r-k-p-p s c r direction) (- c 1) r 6))
			       ((or (equal (get-square s (- c 1) r) 2) (equal (get-square s (- c 1) r) 5)) (cond ((wall-box-block-box s (- c 1) r direction) NIL)
													 (t (keeper-push-box (r-k-p-p s c r direction) c r direction))))
			       );cond 2
	 );left
	((= direction 3) (cond ((wall-block-keeper s c r direction) NIL)
			       ((equal 0 (get-square s (+ c 1) r)) (set-square (r-k-p-p s c r direction) (+ c 1) r 3))
			       ((equal 4 (get-square s (+ c 1) r)) (set-square (r-k-p-p s c r direction) (+ c 1) r 6))
			       ((or (equal (get-square s (+ c 1) r) 2) (equal (get-square s (+ c 1) r) 5)) (cond ((wall-box-block-box s (+ c 1) r direction) NIL)
													 (t (keeper-push-box (r-k-p-p s c r direction) c r direction))))
			       );cond 3
	 );right
	)
  )

			  



;get the position of the keeper, and check for directions of the keeper in a term.
;this function will be called multiple times until all possible routines are found
(defun next-states (s)
  (let* ((pos (getKeeperPosition s 0))
	 (x (car pos))
	 (y (cadr pos))
	 ;x and y are now the coordinate of the keeper in s.
	 ;(result nil)
	 (result (list (try-move s x y 0) (try-move s x y 1) (try-move s x y 2) (try-move s x y 3)))
	 )
    (cleanUpList result);end
    );end let
  );end function


;-------------------------------------

;find the manhattan distance between the keeper to one box for all boxes in the list
(defun manhattan (a b)
  (cond ((< (- (first a) (first b)) 0)
         (cond ((< (- (second a) (second b)) 0)
                (- (+ (- (first a) (first b)) (- (second a) (second b)))))
               (t(- (- (second a) (second b)) (- (first a) (first b))))))
        (t(cond ((< (- (second a) (second b)) 0)
                 (- (- (first a) (first b)) (- (second a) (second b))))
                (t(+ (- (first a) (first b)) (- (second a) (second b)))))))

)

;make a list of the positions of all boxes
(defun boxPos (s c r)
  (cond ((null s) NIL)
	((atom (first s)) (cond ((isBox (first s)) 
			       (cons (list c r) (boxPos (rest s) (+ c 1) r)))
			      (t (boxPos (rest s) (+ c 1) r))));end cond
	(t (append (boxPos (first s) 0 r) (boxPos (rest s) 0 (+ r 1))))
))


;recursively call calcManhattan to find the total cost of keeper->box
(defun calcManhattan (keeperPos boxList)
  (cond ((null boxList) 0)
   (t (+ (manhattan keeperPos (first boxList)) (calcManhattan keeperPos (rest boxList))))
))

;-------------------------------------
; EXERCISE: Modify this function to compute the trivial
; admissible heuristic.                                                                                                                                                                               
;                                                                                                                                                                                                     
(defun h0 (s)
  0
  )

; EXERCISE: Modify this function to compute the 
; number of misplaced boxes in s.
;yes,this heuristic is admissible
(defun h1 (s)
  (COND ((null s) 0)
	((atom s) (COND ((isBox s) 1)
			(t 0)))
	(t (+ (h1 (first s)) (h1 (rest s)))))
  )

; EXERCISE: Change the name of this function to h<UID> where
; <UID> is your actual student ID number. Then, modify this 
; function to compute an admissible heuristic value of s. 
; 
; This function will be entered in the competition.
; Objective: make A* solve problems as fast as possible.
; The Lisp 'time' function can be used to measure the 
; running time of a function call.
;
(defun h604907608(s)  
  (let* ((keeperPos (getKeeperPosition s 0)))
    (*(calcManhattan  keeperPos (boxPos s 0 0)) (h1 s))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;(6)
#|
p1 with h0
Nodes Generated by A*: 131
Nodes Expanded by A*: 50
Solution depth: 6
rcalls: 122
getcalls: 94

p1 with h1 
Nodes Generated by A*: 122
Nodes Expanded by A*: 46
Solution depth: 6
rcalls: 103
getcalls: 77

p1 with h604907608
Nodes Generated by A*: 30
Nodes Expanded by A*: 11
Solution depth: 6
rcalls: 38
getcalls: 14
|#
(setq p1 '((1 1 1 1 1 1)
	   (1 0 3 0 0 1)
	   (1 0 2 0 0 1)
	   (1 1 0 1 1 1)
	   (1 0 0 0 0 1)
	   (1 0 4 0 4 1)
	   (1 1 1 1 1 1)))

;(15)
#|
p2 with h0
Nodes Generated by A*: 658
Nodes Expanded by A*: 238
Solution depth: 15
rcalls: 718
getcalls: 602
|#
(setq p2 '((1 1 1 1 1 1 1)
	   (1 0 0 0 0 0 1) 
	   (1 0 0 0 0 0 1) 
	   (1 0 0 2 1 4 1) 
	   (1 3 4 0 1 0 1)
	   (1 1 1 1 1 1 1)))

;(13)
#|
p3 with h0
Nodes Generated by A*: 698
Nodes Expanded by A*: 244
Solution depth: 13
rcalls: 804
getcalls: 603
|#
(setq p3 '((1 1 1 1 1 1 1 1 1)
	   (1 0 0 0 1 0 0 0 1)
	   (1 0 0 0 2 0 3 4 1)
	   (1 0 0 0 1 0 0 0 1)
	   (1 0 4 0 1 0 0 0 1)
	   (1 1 1 1 1 1 1 1 1)))

;(17)
#|
p4 with h0
Nodes Generated by A*: 1506
Nodes Expanded by A*: 529
Solution depth: 17
rcalls: 6544
getcalls: 1370
|#
(setq p4 '((1 1 1 1 1 1 1)
	   (0 0 0 0 0 1 4)
	   (0 0 0 0 0 0 0)
	   (0 0 1 1 1 0 0)
	   (0 0 1 0 0 0 0)
	   (0 2 1 0 0 4 0)
	   (0 3 1 0 0 0 0)))

;(12)
#|
p5 with h0
Nodes Generated by A*: 2289
Nodes Expanded by A*: 838
Solution depth: 12
rcalls: 3835
getcalls: 1781
|#
(setq p5 '((1 1 1 1 1 1)
	   (1 1 0 0 1 1)
	   (1 0 0 0 0 1)
	   (1 4 2 2 4 1)
	   (1 0 0 0 4 1)
	   (1 1 3 1 1 1)
	   (1 1 1 1 1 1)))

;(13)
#|
p6 with h0
Nodes Generated by A*: 2167
Nodes Expanded by A*: 797
Solution depth: 13
rcalls: 1706
getcalls: 1704
|#
(setq p6 '((1 1 1 1 1 1 1 1)
	   (1 0 0 0 0 0 4 1)
	   (1 4 0 0 2 2 3 1)
	   (1 0 0 1 0 0 4 1)
	   (1 1 1 1 1 1 1 1)))


;(47)
#|
p7 with h0
Nodes Generated by A*: 4559
Nodes Expanded by A*: 1616
Solution depth: 47
rcalls: 127475
getcalls: 4408
|#
(setq p7 '((1 1 1 1 1 1 1 1 1 1)
	   (0 0 1 1 1 1 4 0 0 3)
	   (0 0 0 0 0 1 0 0 0 0)
	   (0 0 0 0 0 1 0 0 1 0)
	   (0 0 1 0 0 1 0 0 1 0)
	   (0 2 1 0 0 0 0 0 1 0)
	   (0 0 1 0 0 0 0 0 1 4)))

;(22)
(setq p8 '((1 1 1 1 1 1)
	   (1 4 0 0 4 1)
	   (1 0 2 2 0 1)
	   (1 2 0 1 0 1)
	   (1 3 4 0 4 1)
	   (1 1 1 1 1 1)))

;(34)
(setq p9 '((1 1 1 1 1 1 1 1 1) 
	   (1 1 1 0 0 1 1 1 1) 
	   (1 0 0 0 0 0 2 0 1) 
	   (1 0 1 0 0 1 2 0 1) 
	   (1 0 4 4 4 1 3 0 1) 
	   (1 1 1 1 1 1 1 1 1)))

;(59)
(setq p10 '((1 1 1 1 1 0 0)
	    (1 4 0 0 1 1 0)
	    (1 3 2 0 0 1 1)
	    (1 1 0 2 0 0 1)
	    (0 1 1 0 2 0 1)
	    (0 0 1 1 0 0 1)
	    (0 0 0 1 1 4 1)
	    (0 0 0 0 1 4 1)
	    (0 0 0 0 1 4 1)
	    (0 0 0 0 1 1 1)))

;(?)
(setq p11 '((0 0 1 0 0 0 0)
	    (0 2 1 4 0 4 0)
	    (0 2 0 4 0 0 0)	   
	    (3 2 1 1 1 4 0)
	    (0 0 1 4 0 0 0)))

;(?)
#|
p12 with h604907608
Nodes Generated by A*: 13208
Nodes Expanded by A*: 4981
Solution depth: 41
rcalls: 179818
getcalls: 10902
|#
(setq p12 '((1 1 1 1 1 0 0 0)
	    (1 0 0 4 1 0 0 0)
	    (1 2 1 0 1 1 1 1)
	    (1 4 0 0 0 0 0 1)
	    (1 0 0 5 0 5 0 1)
	    (1 0 5 0 1 0 1 1)
	    (1 1 1 0 3 0 1 0)
	    (0 0 1 1 1 1 1 0)))

;(?)
(setq p13 '((1 1 1 1 1 1 1 1 1 1)
	    (1 3 0 0 1 0 0 4 4 1)
	    (1 0 2 0 2 0 0 4 4 1)
	    (1 0 2 2 2 1 1 4 4 1)
	    (1 0 0 0 0 1 1 4 4 1)
	    (1 1 1 1 1 1 0 0 0 0)))

;(?)
(setq p14 '((0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0)
	    (0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0)
	    (1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1)
	    (0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0)
	    (0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0)
	    (0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0)
	    (0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0)
	    (0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0)
	    (1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1)
	    (0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0)
	    (0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0)
	    (0 0 0 0 1 0 0 0 0 0 4 1 0 0 0 0)
	    (0 0 0 0 1 0 2 0 0 0 4 1 0 0 0 0)	    
	    (0 0 0 0 1 0 2 0 0 0 4 1 0 0 0 0)
	    ))

;(?)
(setq p15 '((0 0 1 1 1 1 1 1 1 0)
	    (1 1 1 0 0 1 1 1 1 0)
	    (1 0 0 2 0 0 0 1 1 0)
	    (1 3 2 0 2 0 0 0 1 0)
	    (1 1 0 2 0 2 0 0 1 0)
	    (0 1 1 0 2 0 2 0 1 0)
	    (0 0 1 1 0 2 4 0 1 0)
	    (0 0 0 1 1 1 1 0 1 0)
	    (0 0 0 0 1 4 1 0 0 1)
	    (0 0 0 0 1 4 4 4 0 1)
	    (0 0 0 0 1 0 1 4 0 1)
	    (0 0 0 0 1 4 4 4 0 1)
	    (0 0 0 0 1 1 1 1 1 1)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|
 | Utility functions for printing states and moves.
 | You do not need to understand any of the functions below this point.
 |#

;
; Helper function of prettyMoves
; from s1 --> s2
;
(defun detectDiff (s1 s2)
  (let* ((k1 (getKeeperPosition s1 0))
	 (k2 (getKeeperPosition s2 0))
	 (deltaX (- (car k2) (car k1)))
	 (deltaY (- (cadr k2) (cadr k1)))
	 )
    (cond ((= deltaX 0) (if (> deltaY 0) 'DOWN 'UP))
	  (t (if (> deltaX 0) 'RIGHT 'LEFT))
	  );end cond
    );end let
  );end defun

;
; Translates a list of states into a list of moves.
; Usage: (prettyMoves (a* <problem> #'goal-test #'next-states #'heuristic))
;
(defun prettyMoves (m)
  (cond ((null m) nil)
	((= 1 (length m)) (list 'END))
	(t (cons (detectDiff (car m) (cadr m)) (prettyMoves (cdr m))))
	);end cond
  );

;
; Print the content of the square to stdout.
;
(defun printSquare (s)
  (cond ((= s blank) (format t " "))
	((= s wall) (format t "#"))
	((= s box) (format t "$"))
	((= s keeper) (format t "@"))
	((= s star) (format t "."))
	((= s boxstar) (format t "*"))
	((= s keeperstar) (format t "+"))
	(t (format t "|"))
	);end cond
  )

;
; Print a row
;
(defun printRow (r)
  (dolist (cur r)
    (printSquare cur)    
    )
  );

;
; Print a state
;
(defun printState (s)
  (progn    
    (dolist (cur s)
      (printRow cur)
      (format t "~%")
      )
    );end progn
  )

;
; Print a list of states with delay.
;
(defun printStates (sl delay)
  (dolist (cur sl)
    (printState cur)
    (sleep delay)
    );end dolist
  );end defun
